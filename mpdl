#!/bin/bash

########################################################################
# Definitions
########################################################################

ConfigDir=$HOME/.config/mpdl
ConfigFile=$HOME/.config/mpdl/mpdl.rc
ConfigGenreFile=$HOME/.config/mpdl/genredefs.rc
ConfigSongFile=$HOME/.config/mpdl/songdefs.rc
ConfigLogFile=$HOME/.config/mpdl/playedsongs.log
SkipGenreMatch=""
RunningLogRotateTime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
InitialGenre=""
Drift=""

########################################################################
# Functions
########################################################################


function floatToint() {

    # Required due to the way ffmpeg returns BPM (with decimals)
    echo "${@%%.*}"
}

function init_config() {

    if [ -f "$ConfigLogFile" ];then
        touch "$ConfigLogFile"
    fi
    if [ -f "$ConfigSongFile" ];then
        touch "$ConfigSongFile"
    fi
    if [ -f "$ConfigGenreFile" ];then
        touch "$ConfigGenreFile"
    fi
}

function read_variables() {

    if [ -f "$ConfigFile" ];then
        readarray -t line < "$ConfigFile"
        MPDBASE=${line[0]}
        MPD_HOST=${line[1]}
        MPD_PORT=${line[2]}
        MPD_PASS=${line[3]}
        PLAYLIST_TRIGGER=${line[4]}
        BPM_RANGE=${line[5]}  #this is raw number
        SONGAGE=${line[6]}
    else
        exit
    fi
    mapfile -t SongFiles < <( mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT listall | awk -v prefix="$MPDBASE/" '{print prefix $0}' )
    mapfile -t Genre < <( mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT list genre | sed -r 's/\ /_/g' | sed -r 's/\&/and/g' )
}

function rotate_songlog {

    tempfile=$(mktemp)
    currenttime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
    difftime=$(( SONGAGE * 60 * 60 ))
    hightime=$(( currenttime-difftime ))
    echo "Eliminating song log entries older than $SONGAGE hours."
    cat "$ConfigLogFile" | awk -F '@@@' '$1 <= $hightime' > "$tempfile"
    mv -f "$tempfile" "$ConfigLogFile"
}

function zenity_list_genres(){

    OIFS=$IFS;
    IFS=$'\n';
    for ((i=0; i<${#Genre[@]}; ++i));
    do
        IFS=$'\t'
        cont=(${Genre[$i]})
        for ((j=0; j<${#cont[@]}; ++j));
        do
            echo -n -e "FALSE ${cont[$j]} "
        done
        IFS=$OIFS;
    done
    IFS=$OIFS;
}

function setup_genre() {

    for ((i=0; i<${#Genre[@]}; ++i));
    do
        if grep -q "^${Genre[i]};" "$ConfigGenreFile"; then #$HOME/.config/mpdl/genredefs.rc
            echo "${Genre[i]} already parsed"
        else
            bob1=$(zenity_list_genres)
            bob2="${Genre[i]}"
            bob=$(echo "$bob1" | awk -v boo="FALSE $bob2" -v boo2="TRUE $bob2" '{gsub(boo,boo2);print}')
            ans[$i]=$(zenity  --height=400 --list  --text "What genres go with ${Genre[i]}?" --checklist  --column "Pick" --column "options" $bob --separator="@")
            GenreMatch[$i]=$(echo "${Genre[i]};${ans[$i]}")
            echo "${GenreMatch[$i]}"
            #TODO eventually I'd like to put fine tuning in here - say, a percentage for each genre.
            printf "%s\n" "${GenreMatch[i]}" >> "$ConfigGenreFile"
        fi
    done
}

function setup_songinfo() {

    for ((i=0; i<${#SongFiles[@]}; ++i));
    do
        if grep -qF "${SongFiles[i]}" "$ConfigSongFile"; then
            echo -n "#"
        else
            #re='^[0-9]+$'
            #ffmpeg solution - faster by a quarter second a file
            #in my 13,000 mp3 collection, that's 3250 seconds!
            echo -n "@${SongFiles[i]}"
            songdata=$(ffprobe "${SongFiles[i]}" 2>&1)
            SongBpm[$i]=$(echo "$songdata" | grep BPM | awk -F ': ' '{ print $2 }')
            SongGenre[$i]=$(echo "$songdata" | grep --ignore-case GENRE | awk -F ': ' '{ print $2 }' | sed -r 's/\ /_/g' | sed -r 's/\&/and/g')
            if ! [[ $existingbpm =~ $re ]] && [[ "$existingbpm" != "" ]]; then
                echo "Existing BPM jacked up!!" >&2
            fi
            echo "${SongFiles[i]}@@@${SongBpm[i]}@@@${SongGenre[i]}" >> "$ConfigSongFile"
        fi
    done
}

function get_songinfo() {

    mpd_state1=$(mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --format "a@%artist%\nb@%album%\nc@%title%\nd@%file%")
    teststring=$(echo "$mpd_state1" | grep "a@")
    #to avoid crash if empty playlist
    if [ -z "$teststring" ];then
        TempSongAdd=$(mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT listall | awk 'BEGIN { srand() } int(rand() * NR) == 0 { x = $0 } END { print x }' )
        mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT add "$TempSongAdd"
        mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT play
        mpd_state1=$(mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --format "a@%artist%\nb@%album%\nc@%title%\nd@%file%")
    fi
    ARTIST=$(echo "$mpd_state1" | grep "a@" | awk -F "a@" '{print $2}')
    ALBUM=$(echo "$mpd_state1" | grep "b@" | awk -F "b@" '{print $2}')
    TITLE=$(echo "$mpd_state1" | grep "c@" | awk -F "c@" '{print $2}')
    SONGFILE=$(echo "$mpd_state1" | grep "d@" | awk -F "d@" '{print $2}')
    RELSONGFILE=$(echo "$mpd_state1" | grep "d@" | awk -F "d@" '{print $2}')
    SONGFILE="$MPDBASE/$RELSONGFILE"
    SONGDIR=$(dirname "$SONGFILE")

    BeenParsed=$(grep -F "$SONGFILE" "$ConfigSongFile")
    if [ -z "$BeenParsed" ];then
        songdata=$(ffprobe "$SONGFILE" 2>&1)
        SongBpm=$(echo "$songdata" | grep BPM | awk -F ': ' '{ print $2 }')
	# if [[ $(echo "$songdata" | grep --ignore-case GENRE) ]]; then
	SongGenre=$(echo "$songdata" | grep --ignore-case GENRE | awk -F ': ' '{ print $2 }'| sed -r 's/\ /_/g' | sed -r 's/\&/and/g' | perl -MList::Util=shuffle -nlaF";" -e 'print join ";", (shuffle @F)' | sed "s/;/ /g" |  awk '{print $1;}' )
	if ! [[ $existingbpm =~ $re ]] && [[ "$existingbpm" != "" ]]; then
            echo "Existing BPM jacked up!!" >&2
        fi
        echo "$SONGFILE@@@$SongBpm@@@$SongGenre" >> "$ConfigSongFile"
        CurrentSongBpm="$SongBpm"
        CurrentSongGenre="$SongGenre"
    else
        CurrentSongBpm=$(echo "$BeenParsed" | awk -F "@@@" '{print $2}')
	CurrentSongGenre=$(echo "$BeenParsed" | awk -F "@@@" '{print $3}'| sed -r 's/\ /_/g' )
	#| perl -MList::Util=shuffle -nlaF";" -e 'print join ";", (shuffle @F)' | sed "s/;/ /g" |  awk '{print $1;}'  )
    fi
    #InitialGenre="$CurrentSongGenre"
}

function choose_next_song {

        #want to base this off currently playing song
        get_songinfo
        if [ -z "$DRIFT" ];then
	    if [ $(grep ";" <<< "$InitialGenre") ];then
		    if [ "$(echo "$beenpar2" | tr '@' '\n' | sort)" = "$(echo "$InitialGenre" | tr ';' '\n' | sort)" ] ; then
			    beenpar3=$(echo "$beenpar2" | tr ';' '\n' | tr '@' '\n')
			    beenpar4=$(printf '%s\n' "${beenpar3[@]}" | while read line ; do grep "^$line;" "$ConfigGenreFile" ; done | tr ';' '\n' | tr '@' '\n')
			    beenpar5=$(sort <(printf '%s\n' "${beenpar4[@]}") | uniq -c | sort -k1,1nr -k2 | sed 's/^ *[0-9]* //' | head -n3 | tr '\n' '@' | sed "s/@$//" | sed "s/;/@/g" | tr '@' '\n' | uniq | tr '\n' '@' | sed "s/^@//" | sed "s/@$//" )
			    beenparsed=$(echo "555MANYGENRES;$beenpar5")
		    else
		    beenparsed=$(echo "MANYGENRES;$beenpar2")
		    fi
	    else
		    beenparsed=$(grep "^$InitialGenre;" "$ConfigGenreFile")
	    fi
        else
	    igen=$(echo "$CurrentSongGenre" |  perl -MList::Util=shuffle -nlaF";" -e 'print join ";", (shuffle @F)' | sed "s/;/ /g" |  awk '{print $1;}'  )
	    if [ $(grep ";" <<< "$CurrentSongGenre") ];then
		    genr1=$(echo "$CurrentSongGenre" |  awk -F ';' '{print $1;}'  )
	            genr2=$(echo "$CurrentSongGenre" |  awk -F ';' '{print $2;}'  )
	            genr1f=$(grep "^$genr1;" "$ConfigGenreFile" |  awk -F ';' '{print $2;}' | sed "s/@/ /g" | tr " " "\n" | sort | uniq )
		    genr2f=$(grep "^$genr2;" "$ConfigGenreFile" |  awk -F ';' '{print $2;}' | sed "s/@/ /g" | tr " " "\n" | sort | uniq )
		    beenpar=$(comm -12 <(printf '%s\n' "${genr1f[@]}") <(printf '%s\n' "${genr2f[@]}") | sort | uniq | tr '\n' '@' | sed "s/@$//g")
		    beenpar2=$(echo "$InitialGenre;$beenpar" | tr ';' '\n' | tr '@' '\n' | sort | uniq | tr '\n' '@')
	   	    beenparsed=$(echo "MANYGENRES;$beenpar2" | sed "s/@$//")
	    else
	            beenparsed=$(grep "^$igen;" "$ConfigGenreFile")
	    fi
        fi
        echo "$InitialGenre @@ $beenparsed"
        if [ -z "$beenparsed" ];then
            genrematch="$CurrentSongGenre"
        else
            echo "Genre has a match in config file!"
            temp=$(echo "$beenparsed" | awk -F ";" '{print $2}' | sed 's/@/ /g')
            genrematch=$(printf '%s\n' $temp | shuf -n1)
        fi
        echo "Looking for a song in $genrematch"
        CurrentSongBpm=$(floatToint $CurrentSongBpm)

        lowbpm=$((CurrentSongBpm-BPM_RANGE))
        highbpm=$((CurrentSongBpm+BPM_RANGE))
        if [ -z "$SkipGenreMatch" ];then
            # match genre | match bpm range | randomly choose from remainder
            TSongFileToAdd=$(awk -F '@@@' '$3 ~ /\<'$genrematch'\>/' "$ConfigSongFile"| awk -F '@@@' ''$lowbpm' <= $2 && $2 <= '$highbpm' {print $1}' | awk 'BEGIN { srand() } int(rand() * NR) == 0 { x = $0 } END { print x }' )
	    echo "NICE"
        else
            # Too few matches/too many bad matches, now choose randomly...but within BPM range
            # match bpm range | randomly choose from remainder
            TSongFileToAdd=$(cat "$ConfigSongFile" | awk -F '@@@' "'$lowbpm' <= $2 && $2 <= '$highbpm' {print $1}" | awk 'BEGIN { srand() } int(rand() * NR) == 0 { x = $0 } END { print x }' )
	    echo "TOO FEW MATCHES"
        fi
        if cat "$ConfigLogFile" | grep -qF "$TSongFileToAdd"; then
            echo "Song recently used; kicking back"
            SongFileToAdd=""
        else
            SongFileToAdd=${TSongFileToAdd#$MPDBASE/}
            #mark that we used it.
            nowtime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
            echo "$nowtime@@@$TSongFileToAdd" >> "$ConfigLogFile"
        fi
}

function need_next_song {

    OriginalBPM_RANGE="$BPM_RANGE"
    counter=0
    while [ -z "$SongFileToAdd" ];do
        #this increases the acceptable BPM range when there are lots of kickbacks
        echo "Searching for song within BPM range of $BPM_RANGE"
        choose_next_song
        BPM_RANGE=$((BPM_RANGE+counter))
        counter=$((counter+1))
        #If a match can't be found with a wide BPM range we will try
        #to get a good BPM match in all genres
        if [ "$counter" == "10" ] && [ -z "$SkipGenreMatch" ];then
            counter=0
            SkipGenreMatch="TRUE"
	    echo "SKIPGEN"
        fi
    done
    if [ -e "$TSongFileToAdd" ]
    then
	    true
    else
	    sed -i "/$TSongFileToAdd/d" $ConfigSongFile
	    need_next_song
    fi
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT add "$SongFileToAdd"
    #reset match tests
    BPM_RANGE="$OriginalBPM_RANGE"
    SongFileToAdd=""
    SkipGenreMatch=""
}

function main {

    rotate_songlog
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet consume on
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet play
    get_songinfo
    InitialGenre="$CurrentSongGenre"
    genr1=$(echo "$InitialGenre" |  awk -F ';' '{print $1;}'  )
    genr2=$(echo "$InitialGenre" |  awk -F ';' '{print $2;}'  )
    genr1f=$(grep "^$genr1;" "$ConfigGenreFile" |  awk -F ';' '{print $2;}' | sed "s/@/ /g" | tr " " "\n" | sort | uniq )
    genr2f=$(grep "^$genr2;" "$ConfigGenreFile" |  awk -F ';' '{print $2;}' | sed "s/@/ /g" | tr " " "\n" | sort | uniq )
    beenpar=$(comm -12 <(printf '%s\n' "${genr1f[@]}") <(printf '%s\n' "${genr2f[@]}") | sort | uniq | tr '\n' '@' | sed "s/@$//g")
    beenpar2=$(echo "$InitialGenre;$beenpar" | tr ';' '\n' | tr '@' '\n' | sort | uniq | tr '\n' '@' | sed "s/^@//" | sed "s/@$//")
    (echo qman-startup; mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT idleloop) | while read event
    do
        if [ "$event" = "mixer" ]
        then
            continue
        fi
        if [ "$event" = "update" ]
        then
            continue
        fi
        playlist_length=$(mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT playlist | wc -l)
        if [ $playlist_length -lt $PLAYLIST_TRIGGER ];then
            need_next_song
        fi
        ctime=$(TZ=UTC0 printf '%(%s)T\n' '-1')
        Timertime=$(( ctime-3600 ))
        # Has it been an hour?
        if [[ $RunningLogRotateTime -lt $Timertime ]];then
            rotate_songlog
            RunningLogRotateTime=$ctime
        fi
    done
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet consume off
    mpc --host $MPD_PASS@$MPD_HOST --port $MPD_PORT --quiet pause-if-playing
}

function show_help {

echo -e "\n mpdl -[s|g|f|h]\n\n" \
    "Once setup, usage does not require any command line switches\n" \
    "-j OPTIONAL: jump among genres (matches may \"drift\")\n" \
    "See the README for how to set up the rc files\n\n" \
    "-s song scanning and setup\n" \
    "-g genre matching setup\n" \
    "-f both genre matching and song scanning\n" \
    "-h showing this help message\n"
}


########################################################################
# Wherein we call setup stuff and parse arguments
########################################################################

read_variables
init_config

while getopts "sgfhj" opt; do
    case $opt in
        s)
            setup_songinfo
            exit
            ;;
        g)
	    rm $ConfigGenreFile
            setup_genre
            exit
            ;;
        f)
            setup_genre
            setup_songinfo
            exit
            ;;
        h)
            show_help
            exit
            ;;
        j)
            DRIFT="TRUE"
            ;;
		m)	#mood (genre) set
			#user defined moods - with bpms and genres
			echo "-m was triggered, Parameter: $OPTARG";;
    esac
done

main
